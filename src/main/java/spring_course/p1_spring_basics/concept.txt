spring_course.IoC InversionOfControl- инверсия (аутсорсинг, делигирование) создания и управления объектами фреймворку Spring

part2.DI - Dependency Injection - внедрение зависимостей, аутсорсинг добавления и внедрения зависимостей,
           устраняет hardcode dependency (когда мы в ручную создаем объекты через ключевое слово new)
           и делает зависимость объектов друг от друга more flexible

spring_course. IoC InversionOfControl

IoC InversionOfControl- инверсия (аутсорсинг) создания и управления объектами фреймворку Spring
DI - внедрение зависимости - это одно из проявлений IoC
А все вместе (бины (объекты) создает Spring container, DI - ссылки в бине создает Spring Framework, property value...etc) - это IoC InversionOfControl

3 способа конфигурации Spring Container:
- XML file (old school) - часто встречается в старых кодах, необходимо знать
- Annotation + XML file (new method)
- Java code (new method)

- XML file (old school):
Создаем конфигурационный файл applicationContext.xml в директории resources,
где после всех установленных записей отступив на пару строчек начинаем писать бины:

    <bean id = "myPet"              // где "myPet"-мы даем имя id, по которомы мы будем вызываать обьект в Spring Container
          class = "spring_course.IoC.Dog">  // а в class полное имя класса с указанием всех пакетов по иерархии!
                                    // Внимание! Невозможно создать объект от Interface, только от класса
    </bean>

Spring Bean(или Bean) - это объект, который создается и управляется Spring Container (== new Object, который создает программист вручную)
При запуске приложения Spring обращается к конфигурационному файлу и создает все указанные в нем бины. Мы больше не создаем объекты через ключевое слово new
ApplicationContext  это Spring Container, поэтому для получения бина нужно создать ApplicationContext.

В public static void main(String[] args) {
Мы единожды объявляем объект класса ClassPathXmlApplicationContext и указываем название конфигфайла, из которого контейнер получит информацию о бинах
ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext("applicationContext.xml");

Pet pet = context.getBean("myPet", Pet.class);//  id = "myPet" и Pet.class - рефлексия, Pet - чтобы при необходимости измения объекта мы не вносили изменения в код,
                                              //  а только поменяли в  applicationContext.xml
        pet.say();
        context.close();    // после каждого выполнения обязательно закрывать context,
                            // иначе ресурсы не освободятся, может произойти утечка памяти или некорректность при работе программы.



part2.

DI - Dependency Injection - внедрение зависимостей, аутсорсинг добавления и внедрения зависимостей.
DI устраняет hardcode dependency когда мы в ручную создаем объекты через ключевое слово new) и делает зависимость объектов друг от друга more flexible.
Более того, DI позволяет легко изменять эти зависимости.  Есть 3 способа dependency injection:
- Constructor
- Setters
- Autowiring


--- Constructor---

Чтобы Spring мог самостоятельно внедрять зависимости, нужно указать в полях что есть у Person (House, Pet, car..etc. В свою очередь у House есть Door, Window..etc)
public class Person {
    private Pet pet;

В файл applicationContext.xml к уже имеющемуся бину
   <bean id = "myPet"
          class = "spring_course.IoC.Dog">
    </bean>

добавляем бин:

     <bean id = "myPerson"
              class="spring_course.IoC_DI.Person">
            <constructor-arg ref="myPet"/> - ссылка конструктора на бин Pet
}

--- Setters ---
Для создания бина с помощью Setter заменяем constructor-arg на property name="pet" в последней строке

<bean id = "myPerson"
          class="spring_course.IoC_DI.Person">
        <property name="pet" ref="myPet"/> <!--ссылка на Setter setPet. Spring за кулисами преобразует значение pet в setPet.<!--

        <property name="surename" value="${person.surname}"/>  <!--we give names for values with relation for identification, person.age, employee.age etc<!--
        <property name="age" value="${person.age}"/> <!--ref and value are different, ref means link, value is just value line description or portrait etc-->
</bean>

Что мы видим: Создается бин с id "myPerson". Затем в property присваивается id созданного объекта pet:

А что происходит на самом деле: Создается объект типа Person. Затем вызывается метод set этого класса setPet(Pet pet).
А в качестве аргумента передается значение ref (id созданного объекта pet):

При помощи ключевого слова "property" внедряется зависимость с помощью setter. А как Spring узнал с каким именно сеттером связать объект pet.
Мы видим, что начение property="..." прописано как "pet", а не "setPet". Spring за кулисами преобразует значение pet в setPet (pet -> setPet).
в property:
- через ref добавляются зависимые поля принадлежности(Pet, House, Friend etc)
- через value  можно добавить другие поля класса, описательные или идентификационные: name, age, color...Все

 <property name="age" value="33"/> (hardcode! все значения в "" независимо от типа переменных)
 <property name="age" value="${person.age}"/> - через файл app.properties,
 где прописываются все значения с указанием принадлежности person.name=Ivanov, employee.name=Petrov, person.age=33 etc, без ""

 В файле applicationContext.xml после всех дефолтных полей перед бинами прописать путь к файлу app.properties как показано ниже, чтобы знал куда обращаться

 <context:property-placeholder location="classpath:app.properties"/>
 Bean scope
 Scope (область видимости)определяет:
 •жизненный цикл бина
 •возможное количество создаваемых бинов
 Разновидности bean scope:
 singletone / prototype / request /  session / global-session
 singletone–дефолтный scope.
 •такой бин создаётся сразу после прочтения Spring Container-ом конфигфайла.
 •является общим для всех, кто запросит его у Spring Container-а.
 •подходит для stateless объектов.
 prototype
 •такой бин создаётся только после обращения к Spring Container-у с помощью метода getBean.
 •для каждого такого обращения создаётся новый бин в Spring Container-е.
 •подходит для stateful объектов.

 Жизненный цикл бина

 Запуск приложения > Начало работы Spring Container > Создание бина > DI –внедряются зависимости > init-method > Бин готов для использования >
 Использование нами этого бина > Конец работы Spring Container > destroy-method > Остановка приложения

 Чаще всего init-method используется для открытия или настройки каких-либо ресурсов, например баз данных, стримов и т.д.
 destroy-method чаще всего используется для их закрытия.
 Методы init и destroy
 У данных методов access modifier может быть любым
 У данных методов return type может быть любым. Но из-за того, что возвращаемое значение мы никак не можем использовать, чаще всего return type –это void.
 Называться данные методы могут как угодно.
 В данных методах не должно быть параметров.

 Если у бина scope = prototype, то:
 •для этого бинаdestroy-method вызываться не будет
 •init-method будет вызываться для каждого новосозданногобина.
 •программисту необходимо самостоятельно писать код для закрытия/освобождения ресурсов, которые были использованы в бине

Конфигурация с помощью аннотаций
Аннотации –это специальные комментарии/метки/метаданные, которые нужны для передачи определённой информации.
Конфигурация с помощью аннотаций более короткий и быстрый способ, чем конфигурация с помощью XML файла.
Процесс состоит из 2-х этапов:
1.сканирование классов и поиск аннотации @Component
2.Создание (регистрация) бинав Spring Container-е

Если к аннотации @Component не прописать bean id, то бинубудет назначен дефолтный id.
Дефолтный bean id получается из имени класса, заменяя его первую заглавную букву на прописную.

@Autowired
Для внедрения зависимостей с помощью аннотаций используется аннотация @Autowired
Типы autowiring-а или где мы можем использовать данный DI:
•Конструктор
•Сеттер
•Поле
@Autowired
Процесс внедрения зависимостей при использовании @Autowiredтакой:
1. Сканирование пакета, поиск классов с аннотацией @Component
2. При наличии аннотации @Autowiredначинается поиск подходящего по типу бина
Далее ситуация развивается по одному из сценариев:
Если находится 1 подходящий бин, происходит внедрение зависимости;
Если подходящих по типу биновнет, то выбрасывается исключение;
Если подходящих по типу биновбольше одного, тоже выбрасывается исключение.
@Qualifier
Если при использовании @Autowiredподходящих по типу биновбольше одного, то выбрасывается исключение.
Предотвратить выброс данного исключения можно конкретно указав, какой бин должен быть внедрён. Для этого и используют аннотацию @Qualifier.
@Value
Для внедрения строк и других значений можно использовать аннотацию @Value.
В этом случае в сеттерах нет необходимости, как это было при конфигурации с помощью XML файла.