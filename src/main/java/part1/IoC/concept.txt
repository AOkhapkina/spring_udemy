part1.IoC InversionOfControl- инверсия (аутсорсинг, делигирование) создания и управления объектами фреймворку Spring

part1.DI - Dependency Injection - внедрение зависимостей

part1.IoC InversionOfControl- инверсия (аутсорсинг) создания и управления объектами фреймворку Spring
для уменьшения связанности в компьютерных программах, основанный на следующих 2 принципах:
- Модули верхнего уровня не должны зависеть от модулей нижнего уровня. И те, и другие должны зависеть от абстракции.
- Абстракции не должны зависеть от деталей. Детали должны зависеть от абстракций.

3 способа конфигурации Spring Container:
- XML file (old school) - часто встречается в старых кодах, необходимо знать
- Annotation + XML file (new method)
- Java code (new method)

- XML file (old school):
Создаем конфигурационный файл applicationContext.xml в директории resources,
где после всех установленных записей отступив на пару строчек начинаем писать бины:

    <bean id = "myPet"              // где "myPet"-мы даем имя id, по которомы мы будем вызываать обьект в Spring Container
          class = "part1.IoC.Dog">  // а в class полное имя класса с указанием всех пакетов по иерархии!
                                    // Внимание! Невозможно создать объект от Interface, только от класса
    </bean>

Spring Bean(или Bean) - это объект, который создается и управляется Spring Container (== new Object, который создает программист вручную)
При запуске приложения Spring обращается к конфигурационному файлу и создает все указанные в нем бины. Мы больше не создаем объекты через ключевое слово new
АpplicationContext  это Spring Container, поэтому для получения бина нужно создать  АpplicationContext.

В public static void main(String[] args) {
Мы единожды объявляем объект класса ClassPathXmlApplicationContext и указываем название конфигфайла, из которого контейнер получит информацию о бинах
ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext("applicationContext.xml");
Pet pet = context.getBean("myPet", Pet.class);//  id = "myPet" и Pet.class - рефлексия, Pet - чтобы при необходимости измения объекта мы не вносили изменения в код,
                                              //  а только поменяли в  applicationContext.xml
        pet.say();
        context.close();    // после каждого выполнения обязательно закрывать context,
                            // иначе ресурсы не освободятся, может произойти утечка памяти или некорректность при работе программы.







